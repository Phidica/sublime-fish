<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>fish</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!.*\b(fish)|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-</string>
	<key>foldingStartMarker</key>
	<string>\b(begin|for|if|else|function|switch|while)\b|(\{)$</string>
	<key>foldingStopMarker</key>
	<string>^\s*(\}|(else|end)\b)</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Shell Script (fish)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#command-call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>argument</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=^|\s)(?!\s|#|$|\\$)</string>
					<key>comment</key>
					<string>End arg if it precedes unescaped control characters. This could prove troublesome for arguments like --foo=";" unless argument is extended to permit strings after = signs. fish assumes a command call ends at an arg like --foo=; so we should too</string>
					<key>end</key>
					<string>(?&lt;=\S)(?=\s|\)|;|&amp;|\||$)</string>
					<key>name</key>
					<string>function.call.argument.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#command-substitution</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b([\w][\w-]*)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.user.fish</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>command call ends at ), ;, &amp;, |, or an unescaped endline</string>
					<key>end</key>
					<string>(?=\))|(;|&amp;|\|)|(?&lt;!\\)(?=\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.command-call.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#argument</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment-inline</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\(?=\n)</string>
							<key>name</key>
							<string>constant.character.escape</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-substitution</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.character.command-substitution.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.character.command-substitution.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.command-substitution.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#command-call</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.fish</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Consumes the entire line, including the endline, thus hiding the entire comment from command-call</string>
					<key>match</key>
					<string>^\s*(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.fish</string>
				</dict>
			</array>
		</dict>
		<key>comment-inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.fish</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Does not consume the endline, thus allowing the command-call to capture it and end</string>
					<key>match</key>
					<string>(?&lt;=^|\s)(#).*(?=$\n)</string>
					<key>name</key>
					<string>comment.line.number-sign.fish</string>
				</dict>
			</array>
		</dict>
		<key>function-definition</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(function)\s+([^\s\\]+)(?:\s*(\(\)))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.fish</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;|&amp;|$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:and|begin|break|case|continue|else|end|for|if|in|return|switch|while)\b</string>
					<key>name</key>
					<string>keyword.control.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![-/])\b(?:set)\b</string>
					<key>name</key>
					<string>storage.modifier.fish</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;|&amp;&amp;|&amp;|\|\|</string>
					<key>name</key>
					<string>keyword.operator.list.fish</string>
				</dict>
			</array>
		</dict>
		<key>logical-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>do we want a special rule for ( expr )?</string>
					<key>match</key>
					<string>=[=~]?|!=?|&lt;|&gt;|&amp;&amp;|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical.fish</string>
				</dict>
			</array>
		</dict>
		<key>loop</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(for)\s+(?=\({2})</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>name</key>
					<string>meta.scope.for-loop.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(for)\s+((?:[^\s\\]|\\.)+)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.loop.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.scope.for-in-loop.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(while)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>name</key>
					<string>meta.scope.while-loop.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(case)\b</string>
					<key>name</key>
					<string>meta.scope.case-block.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(if)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>name</key>
					<string>meta.scope.if-block.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>math</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Only match an operator if the element to the right is whitespace/endline, a variable, or command substitution</string>
					<key>match</key>
					<string>(\+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|&lt;[&lt;=]?|&gt;[&gt;=]?|==|!=|^|\|{1,2}|&amp;{1,2}|\?|\:|,|=|[*/%+\-&amp;^|]=|&lt;&lt;=|&gt;&gt;=)(?=(\s|$|\$|\())</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>0[xX]\h+</string>
					<key>name</key>
					<string>constant.numeric.hex.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>0\d+</string>
					<key>name</key>
					<string>constant.numeric.octal.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d{1,2}#[0-9a-zA-Z@_]+</string>
					<key>name</key>
					<string>constant.numeric.other.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d+</string>
					<key>name</key>
					<string>constant.numeric.integer.fish</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>pathname</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=\s|:|=|^)~</string>
					<key>name</key>
					<string>keyword.operator.tilde.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*|\?</string>
					<key>name</key>
					<string>keyword.operator.glob.fish</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([?*+@!])(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.extglob.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.extglob.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.extglob.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.structure.extglob.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>pipeline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[|!]</string>
					<key>name</key>
					<string>keyword.operator.pipe.fish</string>
				</dict>
			</array>
		</dict>
		<key>redirection</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>[&gt;&lt;]\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.interpolated.process-substitution.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>valid: &amp;&gt;word &gt;&amp;word &gt;word [n]&gt;&amp;[n] [n]&lt;word [n]&gt;word [n]&gt;&gt;word [n]&lt;&amp;word (last one is duplicate)</string>
					<key>match</key>
					<string>&amp;&gt;|\d*&gt;&amp;\d*|\d*(&gt;&gt;|&gt;|&lt;)|\d*&lt;&amp;|\d*&lt;&gt;</string>
					<key>name</key>
					<string>keyword.operator.redirect.fish</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Only accepted escapes are \' and \\</string>
							<key>match</key>
							<string>\\[\'\\]</string>
							<key>name</key>
							<string>constant.character.escape.fish</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Only accepted escapes are \", \$, \&lt;newline&gt;, and \\</string>
							<key>match</key>
							<string>\\[\"$\n\\]</string>
							<key>name</key>
							<string>constant.character.escape.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Matches literal . (alias for source, may be deprecated in future)</string>
					<key>match</key>
					<string>(?&lt;=^|\s)(?::|\.)(?=\s|;|&amp;|$)</string>
					<key>name</key>
					<string>support.function.builtin.fish</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![-/])\b(?:abbr|alias|bg|bind|block|breakpoint|builtin|cd|command|commandline|complete|contains|count|dirh|dirs|echo|emit|eval|exec|exit|false|fg|fish|fish_config|fish_indent|fish_prompt|fish_realpath|fish_right_prompt|fish_update_completions|fish_vi_mode|funced|funcsave|function|functions|help|history|isatty|jobs|math|nextd|not|open|popd|prevd|printf|prompt_pwd|psub|pushd|pwd|random|read|return|set|set_color|source|status|string|suspend|test|trap|true|type|ulimit|umask|vared)\b</string>
					<key>name</key>
					<string>support.function.builtin.fish</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.fish</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fish variables can only be word characters and no special treatment is necessary</string>
					<key>match</key>
					<string>(\$)\w+(?=\W)</string>
					<key>name</key>
					<string>variable.other.fish</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.fish</string>
	<key>uuid</key>
	<string>a6b750ed-a12a-43c1-84e7-689ac7e2fbc9</string>
</dict>
</plist>
