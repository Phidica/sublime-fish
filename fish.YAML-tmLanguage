# [PackageDev] target_format: plist, ext: tmLanguage
name: friendly interactive shell (fish)
scopeName: source.shell.fish
fileTypes: [fish]
uuid: f9278d07-f7c1-4a9b-9581-ebcbc050fbfb

# Style guide:
# - The fish docs for `complete` define the fundamental units passed to commands as "parameters", where those starting with hyphens are "options" and those which don't are "arguments". For optimum usefulness to the user, only options receive the variable.parameter scope
# - `keyword.control.conditional` is applied to all control keywords that are actually words (if, else, end, function, etc.)
# - `support.function` is applied to any fish builtins that we have to treat uniquely, however `variable.function` is used for everything else including other shell builtins
# - `constant.character.escape` is used for the backslash at the end of a line which causes line continuation because technically that backslash is "escaping" the literal newline which appears in the unquoted string environment which the shell assumes you are in. In this sense, the backslash is indeed an escape character
# - `constant.character.escape` is used for \x?? and \0?? escape codes rather than `constant.numeric.{hex,octal}` because even though the user inputs a numeric value in hex or octal, the codes serve the purpose of making characters not numbers
# - By analogy to the recommendation that `meta.function.php meta.function.parameters.php` should never occur, we use a single `meta.function-call` scope and name the parameter scope `meta.parameter` not `meta.function-call.parameter`. Furthermore, a single `meta.function-call` scope continues from the first command name until the consumption of a ';', '&', or '\n'. The same scope continues through '|' because we have no other way to ensure that a command follows a '|'
# - Every character outside of comments should be scoped as `meta.string.unquoted`, `string.quoted.single`, or `string.quoted.double`. Furthermore, there is no concept of an unquoted string inside a quoted string or vice-versa
# - The invented convention for order of operators in expressions is: newline '\n', whitespace '\s' (includes newline), ';', '&', '(', ')', '|', '<', '>', '^'. Then the pseudo-operators: '-'
# - fish functions (defined with a call to the `function` builtin) cannot begin with a hyphen, however commands (any executable files on the user's $PATH) can begin with a hypen and are executed without trouble. To this end, we never forbid a command call from beginning with a hypen

patterns:
  # Base scope - Pick up '#' and "\\\n" before command-call sees them
  - include: '#comment-external'
  - include: '#line-continuation'

  - comment: The first command of a command chain can't begin with a close parenthesis or be called "end". We match these so exclusively early because the command chain scope will end immediately if either is seen by its lookahead
    comment: In an ideal world, command-call-standard would be performing this match because fish highlights the strings which follow as arguments. But we can't do that in a tmLanguage
    name: meta.function-call.fish invalid.illegal.function-call.fish
    begin: \)|end
    end: (?=[\s;&)|<>])

  - comment: Anonymous scope - Base scope command chain goes up until one of the definitive ends (newline and ';') or the sequences that could be an end if we're actually inside a $self scope right now (')' and "end")
    begin: (?=\S)
    end: \n|(;)|(?=\))|(?=end)
    endCaptures:
      '1': {name: meta.function-call.operator.fish keyword.operator.fish}
    patterns:
      - comment: Match an operation which cannot start a command chain (because it is consumed by the command chain when it appears further within it). These are simple control operators and redirections (which conveniently also matches redirection-into-pipe)
        name: invalid.illegal.operator.fish
        match: (?:[&|]|(?:[0-9]+)?(?:<|>>?|\^\^?))

      - comment: Pick up a comment that has come after an '&'
        include: '#comment-internal-end'

      - comment: Anonymous scope - Base scope command chain (up until an '&')
        comment: The reason we match the '&' in a different way is the ';' can be alone on a line, while we must explicitly require that the '&' comes after a command
        begin: (?=\S)
        end: (?=[\n;)])|(&)
        endCaptures:
          '1': {name: meta.function-call.operator.fish keyword.operator.fish}
        patterns:
          - include: '#command-chain'

repository:
  parameter:
    patterns:
      - comment: See the argument rule for more general information on parameters
        begin: (?![\s;&)|<>^])
        end: (?=[\s;&)|<>])
        patterns:
          - comment: End of options (parameter of just two hyphens)
            name: meta.parameter.option.end.fish variable.parameter.fish punctuation.definition.option.end.fish meta.string.unquoted.fish
            match: (?:--)(?=[\s;&)|<>])

          - comment: Long option (parameter starting with two hyphens)
            name: meta.parameter.option.long.fish
            begin: (?=--)
            end: (?=[\s;&)|<>])
            patterns:
              - name: variable.parameter.fish
                begin: (?:--)
                beginCaptures:
                  '0': {name: punctuation.definition.option.long.begin.fish meta.string.unquoted.fish}
                end: (?=[\s;&)|<>]|=)
                patterns:
                  # We mimic the parameter-patterns rule but use a tweaked unquoted string pattern which excludes '='
                  - include: '#command-substitution'

                  - name: meta.string.unquoted.fish
                    begin: (?=\$)
                    end: (?!\$)
                    patterns:
                      - include: '#variable-expansion'

                  - include: '#string-quoted'

                  - name: meta.string.unquoted.fish
                    begin: (?!['"])
                    end: (?=[\s;&()|<>'"$]|\=)
                    patterns:
                      - include: '#string-unquoted-patterns'

              - comment: Consume the '=' and then use standard parameter patterns as well as numerics
                begin: (?:=)
                beginCaptures:
                  '0': {name: variable.parameter.fish punctuation.definition.option.long.separator.fish meta.string.unquoted.fish }
                end: (?=[\s;&)|<>])
                patterns:
                  - name: meta.string.unquoted.fish constant.numeric.fish
                    match: (?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=[\s;&)|<>])

                  - include: '#parameter-patterns'

          - comment: Short option (parameter starting with one hyphen)
            name: meta.parameter.option.short.fish variable.parameter.fish
            begin: (?:-)(?=[^\s;&)|<>])
            beginCaptures:
              '0': {name: punctuation.definition.option.short.fish meta.string.unquoted.fish}
            end: (?=[\s;&)|<>])
            patterns:
              - include: '#parameter-patterns'

          # Argument (parameter starting with no hyphens)
          - include: '#argument'

  parameter-patterns:
    comment: The typical substitutions, expansions, and escapes allowed anywhere in a parameter
    patterns:
      - include: '#command-substitution'

      - comment: Give variable expansion the unquoted string scope
        name: meta.string.unquoted.fish
        begin: (?=\$)
        end: (?!\$)
        patterns:
          - include: '#variable-expansion'

      # Parameters are otherwise made of strings, either quoted or unquoted. The unquoted string rule handles character escapes and brace expansion
      - include: '#string'

  argument:
    comment: This rule must be entirely standalone because it is used in scopes where parameters starting with hyphens are explicitly interpreted as arguments rather than as options
    patterns:
      - comment: A parameter is a fundamental unit of a command call, defined as a sequence of non-control-operator characters separated by unescaped and unscoped whitespace
        name: meta.parameter.argument.fish
        begin: (?![\s;&)|<>^])
        comment: Begin arg if it does not precede whitespace or a control operator
        end: (?=[\s;&)|<>])
        comment: End arg if it precedes whitespace or control operators (including stdin/stdout redirection but not stderr due to a fish quirk)
        patterns:
          - comment: Home directory expansion only occurs if the '~' is at the front of the argument
            name: meta.string.unquoted.fish meta.home-directory-expansion.fish keyword.operator.tilde.fish
            match: \~

          - comment: Process expansion only occurs if the '%' is at the front of the argument, and continues for the entire argument
            name: meta.process-expansion.fish
            begin: \%
            beginCaptures:
              '0': {name: meta.string.unquoted.fish punctuation.definition.process.fish}
            end: (?=[\s;&)|<>])
            patterns:
              - comment: Match special process names. By a convention that I'm making up, scope them as a type of variable
                name: variable.language.fish meta.string.unquoted.fish
                match: (?:self|last)(?=[\s;&)|<>])

              - include: '#parameter-patterns'

          - comment: Treat a sequence of integers (with possible sign and decimal separator) as a standalone constant. Do this separate to the #string-unquoted-pattens rule so we can ensure it is a string solely of numbers
            name: meta.string.unquoted.fish constant.numeric.fish
            match: (?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=[\s;&)|<>])

          - comment: Use standard parameter patterns exclusively for the remainder of the argument
            begin: (?!\s)
            end: (?=[\s;&)|<>])
            patterns:
              - include: '#parameter-patterns'

  command-chain:
    comment: The command-chain rule is nonterminating, meaning that it will not consume a newline, ';', or '&'
    patterns:
      - comment: Match an operation which cannot start a command chain (because it is consumed by the command chain when it appears further within it). These are simple control operators and redirections (which conveniently also matches redirection-into-pipe)
        comment: Todo - Restructure command-chain so that this match isn't duplicated from the base scope, as it must be for any other scopes which implement their own control operator consumption. Might require the unary operator commands to become an explicit recursive match (though we tried this once and it was more complicated than anything should be)
        name: invalid.illegal.operator.fish
        match: (?:[&|]|(?:[0-9]+)?(?:<|>>?|\^\^?))

      - comment: Match a unary operator command that isn't allowed within a command chain, only at the beginning. Neglect the match if it is taking an option. Allow line continuation between one of these commands and the next function call
        comment: Todo - These commands cannot be followed by backgrounding, piping, or redirection alone. Add logic to catch these cases. It will be extensive...
        name: meta.function-call.fish keyword.operator.word.fish
        match: (and|or)\b(?!\s+-)
      - include: '#line-continuation'

      - comment: This is a hack for now, which allows nesting of 'not' and 'and'/'or' commands. A better solution will be explicit recursivity in these commands
        name: meta.function-call.fish keyword.operator.word.fish
        match: (not)\b(?!\s+-)

      - comment: Match a command which is illegal in the base scope
        name: invalid.illegal.function-call.fish
        match: (?:case|else|end)(?=[\s;&)|<>])

      - comment: Anonymous scope - Command chain. Define a command chain as either one command call, or multiple command calls linked by piping ('|', '2>|', etc). The chain terminates at the first encounter of any other control operator (newline, ';', '&') or the implied newline of the closing parenthesis of a command substitution
        # name: anon-command-chain
        begin: (?=[^\s#])
        end: (\s*)(?=[\n;&)])
        endCaptures:
          '1': {name: meta.function-call.fish}
        patterns:
          - comment: Match the first command of a potential chain
            name: meta.function-call.fish
            begin: |-
              (?x)
              (?# Negative lookahead for piping)
              (?!
                (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
              )
            end: |-
              (?x)
              (?# Look ahead for control operations after whitespace)
              (?=\s*
                (?:
                  (?# Find simple control operations)
                  [\n;&)]
                |
                  (?# Find piping)
                  (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                )
              )
            patterns:
              # Pick up the command call
              - include: '#command-call-meta'
              - include: '#command-call-standard'

          - comment: Match a second or later command of a chain, starting with the connective piping
            name: meta.function-call.fish
            begin: |-
              (?x)
              (?# Look ahead for piping)
              (?=
                (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
              )
            end: (?=\s*[\n;&)])
            patterns:
              - comment: Match a pipe not followed by a command, hence a malformed segment of the chain
                begin: |-
                  (?x)
                  (?# Look ahead for piping followed by either control operators or piping)
                  (?=
                    (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                    \s*
                    (?:
                      [\n;&)]
                    |
                      (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                    )
                  )
                end: (?=\s*[\n;&)])
                patterns:
                  - comment: If the command chain would end implicitly (ie, with a newline or close parenthesis), then mark the pipe itself invalid
                    name: invalid.illegal.operator.fish
                    match: (?:(?:[0-9]+)?(?:<|>|>>))?\|(?=\s*[\n)])

                  - comment: If the command chain would end with an explicit operator or encounter a second set of piping, then mark the first set of piping as valid and beyond as invalid
                    match: |-
                      (?x)
                      (?# Consume valid piping; captures 1 2 3)
                      (?:([0-9]+)?(<|>>?|\^\^?))?(\|)
                      (?# Consume whitespace)
                      \s*
                      (?# Consume remainder; capture 4)
                      (.*)
                    captures:
                      '1': {name: meta.pipe.fish constant.numeric.file-descriptor.fish}
                      '2': {name: meta.pipe.fish keyword.operator.redirect.fish}
                      '3': {name: meta.pipe.fish keyword.operator.pipe.fish}
                      '4': {name: invalid.illegal.function-call.fish}

              - comment: Pick up a legitimate pipe
                name: meta.pipe.fish
                match: (?:([0-9]+)?(<|>>?|\^\^?))?(\|)
                captures:
                  '1': {name: constant.numeric.file-descriptor.fish}
                  '2': {name: keyword.operator.redirect.fish}
                  '3': {name: keyword.operator.pipe.fish}

              # Pick up the command call
              - include: '#line-continuation'
              - include: '#command-call-meta'
              - include: '#command-call-standard'

  command-call-meta:
    comment: Check if the command is a builtin which takes another command as parameters, ie, a meta command. However, ignore the command if it is taking an option or being backgrounded/piped, as in such a case it behaves as a standard command and should be picked up by that scope instead
    comment: Todo - Better logic in the types of piping ignored in the begin match
    patterns:
      - comment: These meta commands force the parameter to behave as a standard command. They stop at piping
        begin: (builtin|command|exec)\b(?!\s+[-&|])
        beginCaptures:
          '1': {name: support.function.fish}
        end: |-
          (?x)
          (?# Look ahead for control operations after whitespace)
          (?=\s*
            (?:
              (?# Find simple control operations)
              [\n;&)]
            |
              (?# Find piping)
              (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
            )
          )
        patterns:
          - include: '#line-continuation'
          - include: '#command-call-standard'

      - comment: This meta command acts as a unary operator on the command to the right, which can also be a meta command. It only applies to one command and stops at piping
        begin: (not)\b(?!\s+[-&|])
        beginCaptures:
          '1': {name: keyword.operator.word.fish}
        end: |-
          (?x)
          (?# Look ahead for control operations after whitespace)
          (?=\s*
            (?:
              (?# Find simple control operations)
              [\n;&)]
            |
              (?# Find piping)
              (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
            )
          )
        patterns:
          - include: '#line-continuation'
          - include: '#command-call-meta'
          - include: '#command-call-standard'

  command-call-standard:
    comment: Check if the command is any other legal command, ie, a standard command
    patterns:
      - comment: A command call can't be a comment, but this match will only be satisfied if the command is first after a pipe because comments are otherwise consumed earlier
        name: invalid.illegal.function-call.fish
        begin: \#
        end: (?=[\n)])

      - comment: Match an operator which cannot start a command call but does not stop the next characters from being interpreted as a command
        name: invalid.illegal.operator.fish
        match: (?:[&|<>^])

      - comment: Anonymous scope - A complete command comprising a name element and optional parameter, redirection, and comment elements
        begin: (?=\S)
        end: |-
          (?x)
          (?# Look ahead for control operations)
          (?=
            (?:
              (?# Find control operations)
              [\n;&)]
            |
              (?# Find piping)
              (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
            )
          )
        patterns:
          - comment: Anonymous scope - A name or block element. If a block is found, everything up to the `end` command is captured here. Note that redirection and process expansion can't start the element
            begin: (?![\s<>^%])
            end: (?=[\s;&)|<>])
            patterns:
              - comment: Look for block structures
                include: '#command-call-standard-block'

              - comment: Look for loop/function control commands. We perform no checking on the validity of their scope (because only allowing them in the correct scope won't work if they are used within if-blocks) or parameters (because fish does that during execution not parsing)
                match: (?:break|continue|return)(?=[\s;&)|<>])
                captures:
                  '0': {name: keyword.control.conditional.fish}

              - comment: Anonymous scope - A generic name element
                begin: (?!\s)
                end: (?=[\s;&)|<>])
                patterns:
                  - comment: A command name can't contain a command substitution. We match the whole line if no closing parenthesis is found, or until the end of the command name if the command substitution gets closed
                    comment: fish would match the whole command name invalid if there was a command substitution anywhere in it, but we can't look ahead that effectively
                    name: invalid.illegal.function-call.fish
                    begin: (?=\()
                    end: (?=[\s;&)|<>])
                    patterns:
                      - begin: \(
                        end: \)|(?=[\n;&)|<>])

                  - comment: Otherwise, treat the element as a fraction of a name made of arbitrary strings (which breaks at an escaped newline)
                    name: variable.function.fish
                    begin: (?!\s)
                    end: (?=[\s;&()|<>])
                    patterns:
                      - comment: The string scope explicitly forbids '$' so that the argument rule can pick it up as a variable expansion, but '$' is treated as a literal in command names, so we have to match it separately
                        name: meta.string.unquoted.fish
                        match: \$

                      - include: '#string'

          - comment: A command name can't begin with a process expansion operator (however the variable expansion operator '$' is allowed)
            name: invalid.illegal.function-call.fish
            begin: \%
            end: (?=[\s;&)|<>])
            patterns:
              - include: '#string'

          # Redirection can immediately follow the command name, without whitespace separation
          - include: '#redirection'

          - comment: Anonymous scope - A list of parameter, redirection, or comment elements. We rely on this list being separated from the command name by whitespace
            begin: (?:[^\n\S]+)
            comment: Match any whitespace characters that aren't the newline
            end: |-
              (?x)
              (?# Look ahead for control operations)
              (?=
                (?:
                  (?# Find simple control operations)
                  [\n;&)]
                |
                  (?# Find piping)
                  (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                )
              )
            patterns:
              - comment: A list of elements that does not start with an end-of-options parameter
                begin: (?!--[\s;&)|<>])
                end: |-
                  (?x)
                  (?# Look ahead for control operations or the end of options)
                  (?=
                    (?:
                      (?# Find simple control operations)
                      [\n;&)]
                    |
                      (?# Find piping)
                      (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                    |
                      (?# Find a double hyphen)
                      --[\s;&)|<>]
                    )
                  )
                patterns:
                  - include: '#line-continuation'
                  - include: '#comment-internal-end'
                  - include: '#redirection'
                  - include: '#parameter'

              - comment: A list of elements that starts with an end-of-options parameter
                begin: (?=--[\s;&)|<>])
                end: |-
                  (?x)
                  (?# Look ahead for control operations)
                  (?=
                    (?:
                      (?# Find simple control operations)
                      [\n;&)]
                    |
                      (?# Find piping)
                      (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                    )
                  )
                patterns:
                  - comment: Contain just the end-of-options parameter and give it the normal scope
                    begin: (?=--[\s;&)|<>])
                    end: (?=[\s;&)|<>])
                    patterns:
                      - include: '#parameter'

                  - comment: A list of elements (now forcibly using arguments)
                    begin: (?=\s)
                    end: |-
                      (?x)
                      (?# Look ahead for control operations)
                      (?=
                        (?:
                          (?# Find simple control operations)
                          [\n;&)]
                        |
                          (?# Find piping)
                          (?:(?:[0-9]+)?(?:<|>>?|\^\^?))?\|
                        )
                      )
                    patterns:
                      - include: '#line-continuation'
                      - include: '#comment-internal-end'
                      - include: '#redirection'
                      - include: '#argument'

  command-call-standard-block:
    patterns:
      - comment: Block commands cannot be backgrounded, piped, or redirected
        match: (begin|while|if|for|switch|function)\s*([&|<>])
        captures:
          '1': {name: variable.function.fish}
          '2': {name: invalid.illegal.operator.fish}

      - comment: The begin command uniquely cannot be the last command in a command substitution
        match: (begin)\s*(\))
        captures:
          '1': {name: variable.function.fish}
          '2': {name: invalid.illegal.operator.fish}

      - comment: The begin command can be alone on a line or followed by any command that doesn't start with a '-'. If a '-' is seen it shouldn't be treated as a block
        name: meta.block.begin.fish
        begin: begin(?=\s*[\n;]|\s+[^\s-])
        beginCaptures:
          '0': {name: keyword.control.conditional.fish}
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          - include: $self

      - name: meta.block.while.fish
        begin: (?=while\s+[^\s;)-])
        comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          - comment: Anonymous scope - Capture the command name we know is there, include a single instance of a command chain, and end when an operator is seen
            begin: while
            beginCaptures:
              '0': {name: keyword.control.conditional.fish}
            end: \s*(?=[\n;&)])
            patterns:
              - include: '#line-continuation'
              - include: '#command-chain'

          - comment: Anonymous scope - Capture the operator we know is there, include the base scope, and end when an `end` command is seen
            begin: \n|(;)|([&)])
            beginCaptures:
              '1': {name: keyword.operator.fish}
              '2': {name: invalid.illegal.operator.fish}
            end: (?=end(?:$|[\s;&)|<>]))
            patterns:
              - include: $self

      - name: meta.block.if.fish
        begin: (?=if\s+[^\s;)-])
        comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          # Note that this internal scope does not treat the closing parenthesis as an operator, because a command substitution can't end in the middle of a block
          - include: '#command-call-standard-block-if-internal'

      - name: meta.block.for-in.fish
        begin: (?=for\s+[^\s;)-])
        comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          - comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the varname), and end when the whitespace after the varname is captured
            begin: (for)(?:\s+)
            beginCaptures:
              '1': {name: keyword.control.conditional.fish}
            end: \s+
            patterns:
              - include: '#line-continuation' # Eats whitespace on next line!

              - include: '#parameter'

              - comment: Capture anything that a parameter explicitly rejects, which is mostly operators
                name: invalid.illegal.operator.fish
                match: \S+

          - comment: Line continuation is allowed between the varname and "in"
            include: '#line-continuation'

          - comment: Anonymous scope - Capture the command name which might be there, include an arbitrary number of arguments, and end when the control operator is seen
            begin: in(?=\s)
            beginCaptures:
              '0': {name: keyword.control.conditional.fish}
            end: \s*(?=[\n;&)])
            patterns:
              - include: '#line-continuation'
              - include: '#comment-internal-end'
              - include: '#argument'

          - comment: Anonymous scope - Capture the operator we know is there, include the base scope, and end when an `end` command is seen
            begin: \n|(;)|([&)])
            beginCaptures:
              '1': {name: keyword.operator.fish}
              '2': {name: invalid.illegal.operator.fish}
            end: (?=end(?:$|[\s;&)|<>]))
            patterns:
              - include: $self

          - comment: Anything beside line continuation, "in", or a control operator is invalid
            name: invalid.illegal.function-call.fish
            match: \S+?(?=[\s;&)])

      - name: meta.block.switch.fish
        begin: (?=switch\s+[^\s;)-])
        comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          - comment: Anonymous scope - Match the valid part of the switch statement, then look for an invalid part
            begin: (?=switch)
            end: \s*(?=[\n;&)])
            patterns:
              - comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the value), and end when whitespace or a control operator is seen
                begin: (switch)(?:\s+)
                beginCaptures:
                  '1': {name: keyword.control.conditional.fish}
                end: (?=[\s;&)])
                patterns:
                  - include: '#line-continuation' # Eats whitespace on next line!

                  - include: '#parameter'

                  - comment: Capture anything that a parameter explicitly rejects, which is mostly operators
                    name: invalid.illegal.operator.fish
                    match: \S+

              - comment: Anonymous scope - Capture whitespace which might be there, match any non-control-operator strings as invalid, and end when a control operator is seen
                begin: \s+
                end: (?=[\n;&)])
                patterns:
                  - name: invalid.illegal.string.fish
                    match: \S+?(?=[\s;&)])

          - comment: Anonymous scope - Capture the operator we know is there, include the base scope, and end when an `end` command is seen
            begin: \n|(;)|([&)])
            beginCaptures:
              '1': {name: keyword.operator.fish}
              '2': {name: invalid.illegal.operator.fish}
            end: (?=end(?:$|[\s;&)|<>]))
            patterns:
              - comment: Anonymous scope - Capture the command name which might be there, include an arbitrary number of arguments, and end when the control operator is captured
                begin: case(?=[\s;&)])
                beginCaptures:
                  '0': {name: keyword.control.conditional.fish}
                end: \n|(;)|([&)])
                endCaptures:
                  '1': {name: keyword.operator.fish}
                  '2': {name: invalid.illegal.operator.fish}
                patterns:
                  - include: '#line-continuation'
                  - include: '#comment-internal-end'
                  - include: '#argument'

                  - comment: Anything else (eg, redirection) is illegal
                    name: invalid.illegal.operator.fish
                    match: \S+?(?=[\s;&)])

              - include: $self

      - name: meta.block.function.fish
        begin: (?=function\s+[^\s;)-])
        comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
        end: end(?=$|[\s;&)|<>])
        endCaptures:
          '0': {name: keyword.control.conditional.fish}
        patterns:
          - comment: Anonymous scope - Match the defined name of the function statement, then look for further parameters
            begin: (?=function)
            end: \s*(?=[\n;&)])
            patterns:
              - comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the value), and end when whitespace or a control operator is seen
                begin: (function)(?:\s+)
                beginCaptures:
                  '1': {name: keyword.control.conditional.fish}
                end: (?=[\s;&)])
                patterns:
                  - include: '#line-continuation' # Eats whitespace on next line!

                  - name: invalid.illegal.string.fish
                    begin: (?:[()|<>])
                    end: (?=[\s;&)])

                  - comment: Anonymous scope - Start when an escaped newline isn't present, and end when whitespace or a control operator is seen
                    begin: (?!\\\n)
                    end: (?=[\s;&()|<>])
                    patterns:
                      # These patterns are similar to the scope around variable.function.fish in command-call-standard, except the defined name is expanded as a parameter

                      - name: entity.name.function.fish
                        begin: (?!\s)
                        end: (?=[\s;&()|<>])
                        patterns:
                          - include: '#parameter'

              - comment: Anonymous scope - Capture whitespace which might be there, then match anything normal for a command call
                begin: \s+
                end: (?=[\n;&)])
                patterns:
                  - include: '#line-continuation'
                  - include: '#comment-internal-end'
                  - include: '#redirection'
                  - include: '#parameter'

          - comment: Anonymous scope - Capture the operator we know is there, include the base scope, and end when an `end` command is seen
            begin: \n|(;)|([&)])
            beginCaptures:
              '1': {name: keyword.operator.fish}
              '2': {name: invalid.illegal.operator.fish}
            end: (?=end(?:$|[\s;&)|<>]))
            patterns:
              - include: $self

  command-call-standard-block-if-internal:
    comment: The acceptable structure internal to an if-end block can be represented recursively because anonymous scopes nest silently. If an `else` without a following `if` is seen, then further `else` commands will be correctly marked as invalid. This is a lot of work just to get that extra little bit of functionality :)
    patterns:
      - comment: Anonymous scope - Capture an `if` and the command up to the end-of-scope operator, then capture from the end-of-scope operator indefinitely
        begin: (?=if(?:\s*\n|\s+[^\s;]))
        end: (?=end(?:$|[\s;&)|<>]))
        patterns:
          - comment: Anonymous scope - Match the command name we know is there, include a single instance of a command chain, and end when an operator is seen
            begin: if
            beginCaptures:
              '0': {name: keyword.control.conditional.fish}
            end: \s*(?=[\n;&])
            patterns:
              - include: '#line-continuation'
              - include: '#command-chain'

          - comment: Anonymous scope - Match the operator we know is there, then include the base scope or an `else` structure
            begin: \n|(;)|(&)
            beginCaptures:
              '1': {name: keyword.operator.fish}
              '2': {name: invalid.illegal.operator.fish}
            end: (?=end(?:$|[\s;&)|<>]))
            patterns:
              - comment: Anonymous scope - Capture an `else` up to the end-of-scope operator or the start of an `if` structure, then match from the end-of-scope operator indefinitely or match an `if` structure
                begin: (?=else\s*[\s;])
                end: (?=end(?:$|[\s;&)|<>]))
                patterns:
                  - comment: Anonymous scope - Match the `else` we know is there and any comment, and mark anything besides an `if` as illegal
                    begin: else(?=\s*[\s;])
                    beginCaptures:
                      '0': {name: keyword.control.conditional.fish}
                    end: \s*(?=[\n;&]|if(?:\s*\n|\s+[^\s;]))
                    endCaptures:
                      '1': {name: keyword.operator.fish}
                      '2': {name: invalid.illegal.operator.fish}
                    patterns:
                      - include: '#line-continuation'
                      - include: '#comment-internal-end'

                      - comment: Anything else is illegal
                        name: invalid.illegal.string.fish
                        match: \S+?(?=[\s;&])

                  - comment: Anonymous scope - Match the operator which will be there if no `if` was seen, then include the base scope which marks further `else` commands as invalid
                    begin: \n|(;)|(&)
                    beginCaptures:
                      '1': {name: keyword.operator.fish}
                      '2': {name: invalid.illegal.operator.fish}
                    end: (?=end(?:$|[\s;&)|<>]))
                    patterns:
                      - include: $self

                  # Match the `if` structure which will be there if no operator was seen
                  - include: '#command-call-standard-block-if-internal'

              - include: $self

  command-substitution:
    patterns:
      - comment: Capture "(...)" or "(...)[...]"
        begin: (?=\()
        end: (?<=\))(?![\(\[])|(?<=\])(?!\()
        patterns:
          - name: meta.parens.command-substitution.fish
            begin: \(
            beginCaptures:
              '0': {name: punctuation.section.parens.begin.fish}
            end: \)
            endCaptures:
              '0': {name: punctuation.section.parens.end.fish}
            patterns:
              - comment: The inside of a command substitution is indistinguishable from a global scope
                include: '$self'

          - include: '#index-expansion'

  comment-external:
    patterns:
      - comment: A full or inline comment outside of any command call
        name: comment.line.external.fish
        begin: \#
        beginCaptures:
          '0': {name: punctuation.definition.comment.fish}
        end: \n

  comment-internal-end:
    patterns:
      - comment: An inline comment at the end of a command call. Does not consume the newline, thus allowing the command call to capture it and end
        name: comment.line.internal.end.fish
        begin: \#
        beginCaptures:
          '0': {name: punctuation.definition.comment.fish}
        end: (?=\n)

  index-expansion:
    patterns:
      - name: meta.brackets.index-expansion.fish
        comment: Note also that command substitution can only have a single index expansion
        begin: \[
        beginCaptures:
          '0': {name: punctuation.section.brackets.begin.fish}
        end: \]
        endCaptures:
          '0': {name: punctuation.section.brackets.end.fish}
        comment: The number of index expansion parameter lists `[...]` should always be less than or equal to the number of variable expansion operators `$`. Unfortunately, we can do nothing to moderate that with this syntax schema; with a *.sublime-syntax and a scope stack it could be done. As it stands, "$$foo[...]" is the deepest that we can accurately highlight
        comment: In other words, the anonymous scope which contains the variable and the index expansion parameter list should only be allowed to contain a single copy of each of those two things. We cannot enforce that without a scope stack. Our workaround is to allow an infinite number of these and hope the user can keep track of when there are too many
        patterns:
          - name: keyword.operator.fish
            match: \.\.

          - include: '#command-substitution'

          - include: '#variable-expansion'

          # Manually recreate the string rule with a numeric match, extra logic in unquoted strings, and don't repeat the meta.string.unquoted scope
          - include: '#string-quoted'
          - name: constant.numeric.fish
            match: (?:[+-]?[0-9]+)(?=[\s;&)|<>]|\]|\.\.)
          - begin: (?![\s'"]|\.\.)
            end: (?=[\s;&)|<>'"]|\]|\.\.)
            comment: Begin/end string as before with the addition of breaking at a ']' or ".."
            patterns:
              - include: '#string-unquoted-patterns'

  line-continuation:
    comment: This rule should be included anywhere that escaping a newline and adding an arbitrary number of comment lines is permitted (which is pretty much everywhere in fish)
    patterns:
      - comment: Consume any number of alternating escaped newlines and lines which have nothing on them but comments
        begin: (?=\\\n)
        end: (?=\n)|^(?![\s\#\\])|\s(?![\s\#])
        comment: End when an unescaped newline is seen, the first character of a line isn't whitespace or a comment character or the escaped newline itself, or if the next character after some consumed whitespace isn't more whitespace or a comment character
        patterns:
          - name: constant.character.escape
            match: \\\n

          - name: comment.line.continuation.fish
            begin: \#
            beginCaptures:
              '0': {name: punctuation.definition.comment.fish}
            end: \n

  redirection:
    patterns:
      - comment: This redirection pattern connects a file descriptor (either explicit or implied) and a file descriptor. As the '&' is necessary, this is a more strict pattern match and must be attended to first
        name: meta.redirection.fish
        begin: (?:([0-9]+)(<|>|>>)|(>>|\^\^|[<>]|(?<=^|\s)\^))(\&)
        beginCaptures:
          '1': {name: constant.numeric.file-descriptor.fish}
          '2': {name: keyword.operator.redirect.fish}
          '3': {name: keyword.operator.redirect.fish}
          '4': {name: keyword.operator.redirect.dereference.fish}
        comment: Begin at any of the redirections valid for a file descriptor (the '&' must be present). Note that the stderr redirection operator '^' must be preceded by whitespace and cannot be preceded by a file descriptor
        end: (?<=[^&\s]|\n)(?=[\s);&|<>])
        comment: End at anything that would end a parameter, with the added condition that the character before the boundary cannot be the final character of the begin match or whitespace, thus allowing an arbitrary amount of whitespace between the begin match and the integer found before the end match
        patterns:
          - include: '#line-continuation'

          - comment: Evaluates to a string which may be an integer
            include: '#command-substitution'

          - comment: Evaluates to a string which may be an integer
            include: '#variable-expansion'

          - name: constant.numeric.file-descriptor.fish
            match: (?:[0-9]+)(?=[\s);&|<>])
          - name: keyword.operator.redirect.close.fish
            match: (?:-)(?=[\s);&|<>])

          - comment: Anything else is illegal
            name: invalid.illegal.file-descriptor.fish
            match: (?:\S+.*)$

      - comment: This redirection pattern connects a file descriptor (either explicit or implied) and a file path
        name: meta.redirection.fish
        begin: (?:([0-9]+)(<|>|>>)|(>>|\^\^|[<>]|(?<=^|\s)\^))(\?)?
        beginCaptures:
          '1': {name: constant.numeric.file-descriptor.fish}
          '2': {name: keyword.operator.redirect.fish}
          '3': {name: keyword.operator.redirect.fish}
          '4': {name: keyword.operator.redirect.clobber-test.fish}
        comment: Begin at any of the redirections valid for a file path (the '?' may optionally be used to prevent clobber). Note that the stderr redirection operator '^' must be preceded by whitespace and cannot be preceded by a file descriptor
        end: (?<=[^<>^?\s]|\n)(?=[\s);&|<>])|(?=\n)
        comment: End at anything that would end a parameter, with the added condition that the character before the boundary cannot be the final character of the begin match or whitespace, thus allowing an arbitrary amount of whitespace between the begin match and the path found before the end match
        patterns:
          - include: '#line-continuation'

          - comment: Evaluates to a string so path cannot begin with '('
            include: '#command-substitution'

          - comment: Evaluates to a string so path cannot begin with '$'
            include: '#variable-expansion'

          - comment: Check for characters which are associated with redirection, so path cannot begin with them
            name: invalid.illegal.path.fish
            match: (?:(?:[&?]|[0-9]*[<>^]).*)$

          - comment: Use the function call match to build a file path, as the syntax is fairly similar (possibly identical, with exceptions caught above)
            name: meta.path.fish
            match: (?:\'(?:\\[\'\\]|[^\'\\])*\'|\"(?:\\[\"$\n\\]|[^\"$\n\\])*\"|(?:\\[abefnrtv $\\*?#(){}\[\]<>^&;|"']|(?<=^|\s)\\[~%]|\\[xX][0-9A-Fa-f]{1,2}|\\[0-7]{1,3}|\\u[0-9A-Fa-f]{1,4}|\\U[0-9A-Fa-f]{1,8}|\\c[?-~]|[^\s$\\*?~%#()<>&|;"']|\\(?=[^abefnrtv\s$\\*?#(){}\[\]<>^&;|"'xXuUc])|(?<=\S|\\ )\\\n|(?<=\S|\\ )[~%#])+)+

  string:
    patterns:
      - include: '#string-quoted'
      - include: '#string-unquoted'

  string-quoted:
    patterns:
      - name: string.quoted.single.fish
        begin: \'
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.fish}
        end: \'
        endCaptures:
          '0': {name: punctuation.definition.string.end.fish}
        patterns:
          - comment: Only accepted escapes are \' and \\
            name: constant.character.escape.fish
            match: \\[\'\\]

      - name: string.quoted.double.fish
        begin: \"
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.fish}
        end: \"
        endCaptures:
          '0': {name: punctuation.definition.string.end.fish}
        patterns:
          - comment: Only accepted escapes are \<newline>, \", \\, and \$
            name: constant.character.escape.fish
            match: \\[\n\"\\$]

          - comment: Variable expansion is the only expansion accepted
            include: '#variable-expansion'

  string-unquoted:
    patterns:
      - name: meta.string.unquoted.fish
        begin: (?![\s;&()|<>'"$])
        comment: Begin unquoted string if not whitespace, control operator, quoted string, or variable expansion
        end: (?=[\s;&()|<>'"$])
        comment: End unquoted string at anything that can't be in one
        patterns:
          - include: '#string-unquoted-patterns'

  string-unquoted-patterns:
    comment: Describe contents of an unquoted string separately for ease of recursion
    patterns:
      - comment: This list follows the order given in official fish documentation, with the addition of additional checks made on the ~ and % characters which only need escaping if they appear at the front of a parameter
        name: constant.character.escape.fish
        match: |-
          (?x)
          \\[abefnrtv $\\*?#(){}\[\]<>^&|;"']
          |
          (?<=^|\s)\\[~%]
          |
          \\[xX][0-9A-Fa-f]{1,2}
          |
          \\[0-7]{1,3}
          |
          \\u[0-9A-Fa-f]{1,4}
          |
          \\U[0-9A-Fa-f]{1,8}
          |
          \\c[?-~]

      - comment: Just for convenience we separate the newline escape
        name: constant.character.escape.fish
        match: \\\n

      - name: meta.braces.brace-expansion.fish
        begin: \{
        beginCaptures:
          '0': {name: punctuation.section.braces.begin.fish}
        end: \}
        endCaptures:
          '0': {name: punctuation.section.braces.end.fish}
        patterns:
          - name: punctuation.section.braces.separator.fish
            match: \,

          - include: '#command-substitution'

          - include: '#variable-expansion'

          # Manually recreate the string rule with a numeric match, extra logic in unquoted strings, and don't repeat the meta.string.unquoted scope
          - include: '#string-quoted'
          - name: constant.numeric.fish
            match: (?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=[\s;&)|<>]|\}|\,)
          - begin: (?![\s;&)|<>'"])
            end: (?=[\s;&)|<>'"]|\}|\,)
            comment: Begin/end string as before with the addition of breaking at a '}' or ','
            patterns:
              - name: constant.character.escape.fish
                match: \\\,
              - include: '#string-unquoted-patterns'

      - name: meta.wildcard-expansion.fish
        match: (\*\*)|(\*)|(\?)
        captures:
          '1': {name: keyword.operator.double-star.fish}
          '2': {name: keyword.operator.single-star.fish}
          '3': {name: keyword.operator.question-mark.fish}

  variable-expansion:
    patterns:
      - include: '#variable-expansion-illegal'

      - comment: Capture "$foo" or "$foo[]" or "$$foo[][]" etc
        name: meta.variable-expansion.fish
        begin: (?=\$)
        end: (?<=[\$\w])(?=[^\$\w\[])|(?<=\])(?![\$\[])
        patterns:
          # Match any depth of recursive variable expansions
          - name: variable.other.fish
            begin: \$
            beginCaptures:
              '0': {name: punctuation.definition.variable.fish}
            end: (?<=[\$\w])(?=[^\$\w])
            patterns:
              - include: '#variable-expansion-illegal'
              - include: '#variable-expansion-simple'

          # Match any number of consecutive index expansions
          - include: '#index-expansion'

  variable-expansion-simple:
    comment: Describe variable expansion that has no index expansion separately
    patterns:
      - name: variable.other.fish
        begin: \$
        beginCaptures:
          '0': {name: punctuation.definition.variable.fish}
        end: (?<=[\$\w])(?=[^\$\w])
        patterns:
          - include: '#variable-expansion-illegal'
          - include: '#variable-expansion-simple'

  variable-expansion-illegal:
    comment: Describe illegal variable expansions separately
    patterns:
      - comment: A lone '$' in a scope, or an attempt to expand a variable starting with a nonword character, is an error. These boundaries are the same as for meta.string.unquoted
        name: invalid.illegal.variable-expansion.fish
        match: \$(?:(?=[,'"\]}\s);&|])|[^\w\$][^$,'"\]}\s);&|]*)

firstLineMatch: ^#!.*\b(fish)|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-
foldingStartMarker: \b(begin|case|for|if|else|function|switch|while)\b|(\{)$
foldingStopMarker: ^\s*(\}|(case|else|end)\b)
keyEquivalent: ^~S
