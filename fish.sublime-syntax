%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Shell Script (fish)
file_extensions:
  - fish
first_line_match: '^#!.*\b(fish)|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-'
scope: source.fish
contexts:
  main:
    - include: comment
    - include: function-definition
    - include: interpolation
    - include: keyword
    - include: list
    - include: logical-expression
    - include: loop
    - include: math
    - include: pathname
    - include: pipeline
    - include: redirection
    - include: string
    - include: support
    - include: variable
  comment:
    - match: '(?<!\S)(#)(?!\{).*$\n?'
      scope: comment.line.number-sign.fish
      captures:
        1: punctuation.definition.comment.fish
  function-definition:
    - match: '\b(function)\s+([^\s\\]+)(?:\s*(\(\)))?'
      captures:
        1: storage.type.function.fish
        2: entity.name.function.fish
        3: punctuation.definition.arguments.fish
      push:
        - meta_scope: meta.function.fish
        - match: ;|&|$
          captures:
            1: punctuation.definition.function.fish
          pop: true
        - include: main
  interpolation:
    - match: '\{\$'
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.interpolated.dollar.fish
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - include: main
  keyword:
    - match: \b(?:and|begin|break|case|continue|else|end|for|if|in|return|switch|while)\b
      scope: keyword.control.fish
    - match: '(?<![-/])\b(?:set)\b'
      scope: storage.modifier.fish
  list:
    - match: ;|&&|&|\|\|
      scope: keyword.operator.list.fish
  logical-expression:
    - match: '=[=~]?|!=?|<|>|&&|\|\|'
      comment: do we want a special rule for ( expr )?
      scope: keyword.operator.logical.fish
    - match: '(?<!\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])'
      scope: keyword.operator.logical.fish
  loop:
    - match: '\b(for)\s+(?=\({2})'
      captures:
        1: keyword.control.fish
      push:
        - meta_scope: meta.scope.for-loop.fish
        - match: \b(end)\b
          captures:
            1: keyword.control.fish
          pop: true
        - include: main
    - match: '\b(for)\s+((?:[^\s\\]|\\.)+)\b'
      captures:
        1: keyword.control.fish
        2: variable.other.loop.fish
      push:
        - meta_scope: meta.scope.for-in-loop.fish
        - match: \b(end)\b
          captures:
            1: keyword.control.fish
          pop: true
        - include: main
    - match: \b(while)\b
      captures:
        1: keyword.control.fish
      push:
        - meta_scope: meta.scope.while-loop.fish
        - match: \b(end)\b
          captures:
            1: keyword.control.fish
          pop: true
        - include: main
    - match: \b(case)\b
      scope: meta.scope.case-block.fish
      captures:
        1: keyword.control.fish
    - match: \b(if)\b
      captures:
        1: keyword.control.fish
      push:
        - meta_scope: meta.scope.if-block.fish
        - match: \b(end)\b
          captures:
            1: keyword.control.fish
          pop: true
        - include: main
  math:
    - match: '\+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\|{1,2}|&{1,2}|\?|\:|,|=|[*/%+\-&^|]=|<<=|>>='
      scope: keyword.operator.arithmetic.fish
    - match: '0[xX]\h+'
      scope: constant.numeric.hex.fish
    - match: '0\d+'
      scope: constant.numeric.octal.fish
    - match: '\d{1,2}#[0-9a-zA-Z@_]+'
      scope: constant.numeric.other.fish
    - match: \d+
      scope: constant.numeric.integer.fish
    - include: variable
  pathname:
    - match: (?<=\s|:|=|^)~
      scope: keyword.operator.tilde.fish
    - match: \*|\?
      scope: keyword.operator.glob.fish
    - match: '([?*+@!])(\()'
      captures:
        1: keyword.operator.extglob.fish
        2: punctuation.definition.extglob.fish
      push:
        - meta_scope: meta.structure.extglob.fish
        - match: (\))
          captures:
            1: punctuation.definition.extglob.fish
          pop: true
        - include: main
  pipeline:
    - match: "[|!]"
      scope: keyword.operator.pipe.fish
  redirection:
    - match: '[><]\('
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.interpolated.process-substitution.fish
        - match: \)
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - include: main
    - match: '&>|\d*>&\d*|\d*(>>|>|<)|\d*<&|\d*<>'
      comment: "valid: &>word >&word >word [n]>&[n] [n]<word [n]>word [n]>>word [n]<&word (last one is duplicate)"
      scope: keyword.operator.redirect.fish
  string:
    - match: \\.
      scope: constant.character.escape.fish
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.single.fish
        - match: "'"
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.double.fish
        - match: '"'
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: '\\[\$`"\\\n]'
          scope: constant.character.escape.fish
        - include: variable
        - include: interpolation
    - match: \$'
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.single.dollar.fish
        - match: "'"
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: \\(a|b|e|f|n|r|t|v|\\|')
          scope: constant.character.escape.ansi-c.fish
        - match: '\\[0-9]{3}'
          scope: constant.character.escape.octal.fish
        - match: '\\([xX][0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
          scope: constant.character.escape.hex.fish
        - match: \\c.
          scope: constant.character.escape.control-char.fish
  support:
    - match: (?<=^|\s)(?::|\.)(?=\s|;|&|$)
      scope: support.function.builtin.fish
      comment: Matches literal . (alias for source, may be deprecated in future)
    - match: '(?<![-/])\b(?:abbr|alias|bg|bind|block|breakpoint|builtin|cd|command|commandline|complete|contains|count|dirh|dirs|echo|emit|eval|exec|exit|false|fg|fish|fish_config|fish_indent|fish_prompt|fish_realpath|fish_right_prompt|fish_update_completions|fish_vi_mode|funced|funcsave|function|functions|help|history|isatty|jobs|math|nextd|not|open|popd|prevd|printf|prompt_pwd|psub|pushd|pwd|random|read|return|set|set_color|source|status|string|suspend|test|trap|true|type|ulimit|umask|vared)\b'
      scope: support.function.builtin.fish
  variable:
    - match: '(\$)[-*@#?$!0_]'
      scope: variable.other.special.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: '(\$)[1-9]'
      scope: variable.other.positional.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: '(\$+)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.normal.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: '(?<!")(\{\$+)'
      captures:
        0: punctuation.definition.variable.fish
      push:
        - meta_scope: variable.other.bracket.fish
        - match: '(\})(?!")'
          captures:
            0: punctuation.definition.variable.fish
          pop: true
        - match: "[a-zA-Z_][a-zA-Z0-9_]*"
          scope: variable.other.normal.fish
          captures:
            1: punctuation.definition.variable.fish
